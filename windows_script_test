<# 
CyberPatriot Windows Server 2022 Hardening Script
Author: Modified for CyberPatriot Server 2022 scenario
Run as: PowerShell (Admin) - Run as amojtabai
Tested: Windows Server 2022

CRITICAL NOTES:
- Preserves RDP (required by scenario)
- Preserves SMB/File Sharing (required by scenario)
- Preserves AFA share (C:\AFA -> share name: AFA)
- Does NOT change amojtabai password (auto-login user)
- Maintains CCSClient.exe service
- Keeps authorized users and admins

Switches:
 -AuditOnly     : Print actions only; do not modify system
 -LogDir        : Log/backup output directory (default C:\CyberPatriotLogs)
 -SkipUserPasswords : Skip password changes for users (use if you want to do manually)

Creates:
 - Backups of key registry hives + service startup states
 - CSV/TXT audits (admins, shares, users, tasks, startups)
 - Summary report with findings and actions
#>

[CmdletBinding()]
param(
    [switch]$AuditOnly,
    [string]$LogDir = "$env:SystemDrive\CyberPatriotLogs",
    [switch]$SkipUserPasswords
)

# ---------- Configuration ----------
$AuthorizedAdmins = @('amojtabai', 'hcooper', 'hhambright', 'tito')
$AuthorizedUsers = @('rreddington', 'ekeen', 'dressler', 'snavabi', 'dzuma', 'mmalik', 'apark', 'gcarter', 'cpanabaker')
$AllAuthorizedAccounts = $AuthorizedAdmins + $AuthorizedUsers
$CurrentUser = $env:USERNAME
$RequiredShare = 'AFA'  # Must preserve this share

# ---------- Helpers ----------
function Assert-Admin {
    if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
        Write-Error "Run this script in an elevated PowerShell (Admin)."
        exit 1
    }
}

function Do { 
    param([scriptblock]$Action, [string]$Desc)
    if ($AuditOnly) { 
        Write-Host "[AUDIT] $Desc" -ForegroundColor Cyan 
    } else { 
        Write-Host "[APPLY] $Desc" -ForegroundColor Green
        try {
            & $Action
        } catch {
            Write-Warning "Failed: $Desc - $_"
        }
    }
}

function Log-Finding {
    param([string]$Finding, [string]$Severity = "Info")
    $color = switch($Severity) {
        "Critical" { "Red" }
        "Warning" { "Yellow" }
        "Info" { "White" }
        default { "White" }
    }
    Write-Host "[$Severity] $Finding" -ForegroundColor $color
    Add-Content -Path "$LogDir\findings-$stamp.txt" -Value "[$Severity] $Finding"
}

function Safe-NewDir([string]$p) { 
    if(-not(Test-Path $p)) { 
        New-Item -ItemType Directory -Path $p -Force | Out-Null 
    } 
}

function TimeStamp { 
    Get-Date -Format "yyyyMMdd-HHmmss" 
}

function Set-RegDword($path, $name, $val) {
    if(-not (Test-Path $path)) {
        New-Item -Path $path -Force | Out-Null
    }
    Set-ItemProperty -Path $path -Name $name -Value $val -Type DWord -Force
}

function Set-RegString($path, $name, $val) {
    if(-not (Test-Path $path)) {
        New-Item -Path $path -Force | Out-Null
    }
    Set-ItemProperty -Path $path -Name $name -Value $val -Type String -Force
}

# ---------- Initialize ----------
Assert-Admin
Safe-NewDir $LogDir
$stamp = TimeStamp
Start-Transcript -Path "$LogDir\hardening-$stamp.log" -Force | Out-Null

Write-Host "`n===== CyberPatriot Server 2022 Hardening Script =====" -ForegroundColor Magenta
Write-Host "Current User: $CurrentUser" -ForegroundColor Cyan
Write-Host "Audit Only Mode: $AuditOnly" -ForegroundColor Cyan
Write-Host "Log Directory: $LogDir`n" -ForegroundColor Cyan

# ---------- Backups ----------
Write-Host "`n[PHASE 1] Creating Backups..." -ForegroundColor Yellow

$regBackupDir = Join-Path $LogDir "registry-$stamp"
$svcBackupCsv = Join-Path $LogDir "services-$stamp.csv"
Safe-NewDir $regBackupDir

$RegKeysToBackup = @(
    'HKLM\SYSTEM\CurrentControlSet\Control\Lsa',
    'HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System',
    'HKLM\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters',
    'HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU',
    'HKLM\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient',
    'HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon',
    'HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters',
    'HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server'
)

foreach($k in $RegKeysToBackup) {
    Do { reg.exe export $k "$regBackupDir\$(($k -replace '[\\/:*?""<>|]','_')).reg" /y 2>$null | Out-Null } "Backup registry: $k"
}

Do { Get-Service | Select Name, DisplayName, Status, StartType | Export-Csv -NoTypeInformation -Path $svcBackupCsv } "Backup service startup states"

# ---------- User Account Audit & Management ----------
Write-Host "`n[PHASE 2] User Account Management..." -ForegroundColor Yellow

$usersCsv = Join-Path $LogDir "local-users-$stamp.csv"
$adminListPath = Join-Path $LogDir "local-admins-$stamp.txt"

# Enumerate current users
$currentUsers = Get-LocalUser
$currentUsers | Select Name, Enabled, PasswordRequired, PasswordLastSet, LastLogon,
    @{N='PasswordAgeDays';E={if($_.PasswordLastSet) {(New-TimeSpan $_.PasswordLastSet).Days} else {"Never"}}} |
    Export-Csv $usersCsv -NoTypeInformation

# Check for unauthorized users
Do {
    foreach($user in $currentUsers) {
        if($user.Name -notin $AllAuthorizedAccounts) {
            if($user.Name -notlike '*$' -and $user.Name -ne 'Administrator' -and $user.Name -ne 'Guest' -and $user.Name -ne 'DefaultAccount') {
                Log-Finding "Unauthorized user found: $($user.Name)" "Critical"
                if(-not $AuditOnly) {
                    Disable-LocalUser -Name $user.Name
                    Log-Finding "Disabled unauthorized user: $($user.Name)" "Info"
                }
            }
        }
    }
} "Check and disable unauthorized users"

# Ensure Guest and Administrator accounts are disabled (unless amojtabai is Administrator)
Do {
    if($CurrentUser -ne 'Administrator') {
        Disable-LocalUser -Name 'Administrator' -ErrorAction SilentlyContinue
    }
    Disable-LocalUser -Name 'Guest' -ErrorAction SilentlyContinue
} "Disable Guest and built-in Administrator accounts"

# Set password requirements for users (NOT for amojtabai - auto-login user)
if(-not $SkipUserPasswords) {
    Do {
        foreach($userName in $AllAuthorizedAccounts) {
            if($userName -ne 'amojtabai') {  # Don't change auto-login user
                $user = Get-LocalUser -Name $userName -ErrorAction SilentlyContinue
                if($user) {
                    # Generate secure password
                    $newPass = "Cyb3rP@triot$(Get-Random -Minimum 1000 -Maximum 9999)!"
                    $secPass = ConvertTo-SecureString $newPass -AsPlainText -Force
                    
                    Set-LocalUser -Name $userName -Password $secPass -PasswordNeverExpires $false
                    Set-LocalUser -Name $userName -UserMayChangePassword $true
                    
                    # Log password change (for reference - delete after competition)
                    Add-Content -Path "$LogDir\PASSWORDS-DELETE-AFTER-$stamp.txt" -Value "$userName : $newPass"
                }
            }
        }
    } "Set secure passwords for authorized users (except amojtabai)"
}

# Fix group memberships
Do {
    $adminsGroup = Get-LocalGroupMember -Group 'Administrators' -ErrorAction SilentlyContinue
    "Current Administrators group members:" | Out-File $adminListPath
    $adminsGroup | Format-Table -AutoSize | Out-String | Add-Content $adminListPath
    
    # Add authorized admins if missing
    foreach($admin in $AuthorizedAdmins) {
        $isMember = $adminsGroup | Where-Object { $_.Name -like "*\$admin" }
        if(-not $isMember) {
            try {
                Add-LocalGroupMember -Group 'Administrators' -Member $admin -ErrorAction Stop
                Log-Finding "Added $admin to Administrators group" "Info"
            } catch {}
        }
    }
    
    # Remove unauthorized admins
    foreach($member in $adminsGroup) {
        $memberName = ($member.Name -split '\\')[-1]
        if($memberName -notin $AuthorizedAdmins -and $memberName -ne 'Administrator') {
            try {
                Remove-LocalGroupMember -Group 'Administrators' -Member $member.Name -ErrorAction Stop
                Log-Finding "Removed $memberName from Administrators group" "Warning"
            } catch {}
        }
    }
} "Configure Administrators group membership"

# ---------- Password & Lockout Policy ----------
Write-Host "`n[PHASE 3] Password and Security Policies..." -ForegroundColor Yellow

$infPath = Join-Path $LogDir "local-security-$stamp.inf"
@"
[System Access]
MinimumPasswordAge = 1
MaximumPasswordAge = 90
MinimumPasswordLength = 10
PasswordComplexity = 1
PasswordHistorySize = 10
LockoutBadCount = 5
ResetLockoutCount = 30
LockoutDuration = 30
ClearTextPassword = 0
LSAAnonymousNameLookup = 0

[Event Audit]
AuditSystemEvents = 3
AuditLogonEvents = 3
AuditObjectAccess = 3
AuditPrivilegeUse = 3
AuditPolicyChange = 3
AuditAccountManage = 3
AuditProcessTracking = 3
AuditDSAccess = 3
AuditAccountLogon = 3
"@ | Out-File -Encoding ASCII $infPath

Do { 
    secedit.exe /configure /db "$LogDir\secedit-$stamp.sdb" /cfg $infPath /areas SECURITYPOLICY /quiet
    net accounts /lockoutthreshold:5 /MINPWLEN:10 /MAXPWAGE:90 /MINPWAGE:1 | Out-Null
} "Apply password and account lockout policies"

# Enable advanced auditing
Do { auditpol /set /category:* /success:enable /failure:enable | Out-Null } "Enable comprehensive auditing"

# ---------- Windows Firewall ----------
Write-Host "`n[PHASE 4] Firewall Configuration..." -ForegroundColor Yellow

Do {
    # Enable firewall on all profiles
    netsh advfirewall set allprofiles state on | Out-Null
    
    # Set default policies (block inbound, allow outbound)
    netsh advfirewall set domainprofile firewallpolicy blockinboundalways,allowoutbound | Out-Null
    netsh advfirewall set privateprofile firewallpolicy blockinboundalways,allowoutbound | Out-Null
    netsh advfirewall set publicprofile firewallpolicy blockinboundalways,allowoutbound | Out-Null
    
    # Ensure RDP is allowed (required by scenario)
    netsh advfirewall firewall set rule group="Remote Desktop" new enable=yes | Out-Null
    
    # Ensure File and Printer Sharing is allowed (for SMB - required)
    netsh advfirewall firewall set rule group="File and Printer Sharing" new enable=yes | Out-Null
    
    # Disable unnecessary rules
    $unnecessaryRules = @(
        "Remote Assistance*",
        "Telnet Server",
        "netcat",
        "Windows Media Player*"
    )
    foreach($rule in $unnecessaryRules) {
        netsh advfirewall firewall set rule name="$rule" new enable=no 2>$null | Out-Null
    }
} "Configure Windows Firewall (preserving RDP and SMB)"

# ---------- Services Management ----------
Write-Host "`n[PHASE 5] Services Configuration..." -ForegroundColor Yellow

# Services to disable (but NOT Terminal Services or SMB related)
$servicesToDisable = @(
    'RemoteRegistry',    # Remote Registry
    'SSDPSRV',          # SSDP Discovery
    'upnphost',         # UPnP Device Host  
    'Telnet',           # Telnet
    'SNMP',             # SNMP Service
    'SNMPTRAP',         # SNMP Trap
    'WMPNetworkSvc',    # Windows Media Player Network Sharing
    'Fax',              # Fax Service
    'XboxGipSvc',       # Xbox services
    'XblAuthManager',
    'XblGameSave',
    'XboxNetApiSvc',
    'Browser',          # Computer Browser
    'lfsvc',            # Geolocation Service
    'MapsBroker',       # Downloaded Maps Manager
    'RetailDemo',       # Retail Demo Service
    'PhoneSvc',         # Phone Service
    'WbioSrvc',         # Windows Biometric Service
    'WinHttpAutoProxySvc', # WinHTTP Web Proxy Auto-Discovery
    'wisvc'             # Windows Insider Service
)

Do {
    foreach($svcName in $servicesToDisable) {
        $svc = Get-Service -Name $svcName -ErrorAction SilentlyContinue
        if($svc -and $svc.Name -ne 'CCSClient') {  # Never touch CCSClient
            try {
                Stop-Service -Name $svcName -Force -ErrorAction SilentlyContinue
                Set-Service -Name $svcName -StartupType Disabled -ErrorAction SilentlyContinue
                Log-Finding "Disabled service: $svcName" "Info"
            } catch {}
        }
    }
} "Disable unnecessary services"

# Services to set to Manual (safer than disabling)
$servicesToManual = @('Spooler')  # Print Spooler

Do {
    foreach($svcName in $servicesToManual) {
        $svc = Get-Service -Name $svcName -ErrorAction SilentlyContinue
        if($svc) {
            Set-Service -Name $svcName -StartupType Manual -ErrorAction SilentlyContinue
        }
    }
} "Set Print Spooler to Manual"

# Ensure critical services are running
$criticalServices = @(
    'TermService',      # Remote Desktop Services  
    'LanmanServer',     # Server (SMB)
    'LanmanWorkstation' # Workstation (SMB client)
)

Do {
    foreach($svcName in $criticalServices) {
        $svc = Get-Service -Name $svcName -ErrorAction SilentlyContinue
        if($svc) {
            Set-Service -Name $svcName -StartupType Automatic -ErrorAction SilentlyContinue
            Start-Service -Name $svcName -ErrorAction SilentlyContinue
            Log-Finding "Ensured critical service running: $svcName" "Info"
        }
    }
} "Ensure critical services are running"

# ---------- RDP Configuration ----------
Write-Host "`n[PHASE 6] Remote Desktop Configuration..." -ForegroundColor Yellow

Do {
    # Enable RDP with NLA (required by scenario)
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server' 'fDenyTSConnections' 0
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' 'UserAuthentication' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' 'SecurityLayer' 2
    
    # Set RDP port to default (3389) in case it was changed
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' 'PortNumber' 3389
} "Configure RDP with Network Level Authentication"

# ---------- SMB/File Sharing Configuration ----------
Write-Host "`n[PHASE 7] SMB and File Sharing Configuration..." -ForegroundColor Yellow

$shareListPath = Join-Path $LogDir "shares-$stamp.txt"

Do {
    # Enumerate current shares
    $currentShares = Get-SmbShare -ErrorAction SilentlyContinue
    $currentShares | Format-Table -AutoSize | Out-String | Out-File $shareListPath
    
    # Check if AFA share exists
    $afaShare = $currentShares | Where-Object { $_.Name -eq $RequiredShare }
    if(-not $afaShare) {
        # Create AFA directory if it doesn't exist
        if(-not (Test-Path 'C:\AFA')) {
            New-Item -ItemType Directory -Path 'C:\AFA' -Force | Out-Null
        }
        # Create the share
        New-SmbShare -Name 'AFA' -Path 'C:\AFA' -FullAccess 'Administrators' -ReadAccess 'Users' -ErrorAction SilentlyContinue
        Log-Finding "Created required AFA share" "Info"
    }
    
    # SMB signing and security
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters' 'RequireSecuritySignature' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters' 'EnableSecuritySignature' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters' 'RequireSecuritySignature' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters' 'EnableSecuritySignature' 1
    
    # Disable SMBv1 if present
    Set-SmbServerConfiguration -EnableSMB1Protocol $false -Force -ErrorAction SilentlyContinue
} "Configure SMB security and ensure AFA share exists"

# ---------- LSA and Authentication Hardening ----------
Write-Host "`n[PHASE 8] LSA and Authentication Security..." -ForegroundColor Yellow

Do {
    # LSA Protection
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'RunAsPPL' 1
    
    # NTLMv2 only
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'LmCompatibilityLevel' 5
    
    # No LM hash storage
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'NoLMHash' 1
    
    # Restrict anonymous access
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'RestrictAnonymous' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'RestrictAnonymousSAM' 1
    
    # Deny blank passwords
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'LimitBlankPasswordUse' 1
    
    # Disable storing passwords in clear text
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'DisableDomainCreds' 1
} "Harden LSA and authentication settings"

# ---------- UAC Configuration ----------
Write-Host "`n[PHASE 9] User Account Control..." -ForegroundColor Yellow

Do {
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'EnableLUA' 1
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'ConsentPromptBehaviorAdmin' 2
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'ConsentPromptBehaviorUser' 0
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'PromptOnSecureDesktop' 1
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'EnableInstallerDetection' 1
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'EnableVirtualization' 1
} "Configure User Account Control"

# ---------- Windows Defender ----------
Write-Host "`n[PHASE 10] Windows Defender Configuration..." -ForegroundColor Yellow

Do {
    # Enable Windows Defender
    Set-MpPreference -DisableRealtimeMonitoring $false -ErrorAction SilentlyContinue
    
    # Enable cloud protection
    Set-MpPreference -MAPSReporting Advanced -ErrorAction SilentlyContinue
    Set-MpPreference -SubmitSamplesConsent SendAllSamples -ErrorAction SilentlyContinue
    
    # Enable behavior monitoring
    Set-MpPreference -DisableBehaviorMonitoring $false -ErrorAction SilentlyContinue
    
    # Update signatures
    Update-MpSignature -ErrorAction SilentlyContinue
    
    # Start a quick scan
    Start-MpScan -ScanType QuickScan -ErrorAction SilentlyContinue
} "Configure and update Windows Defender"

# ---------- Network Security ----------
Write-Host "`n[PHASE 11] Network Security..." -ForegroundColor Yellow

Do {
    # Disable LLMNR
    Set-RegDword 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient' 'EnableMulticast' 0
    
    # Disable NetBIOS over TCP/IP
    $adapters = Get-WmiObject Win32_NetworkAdapterConfiguration -Filter "IPEnabled='True'"
    foreach($adapter in $adapters) {
        $adapter.SetTcpipNetbios(2) | Out-Null  # 2 = Disable NetBIOS over TCP/IP
    }
    
    # TCP/IP stack hardening
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' 'EnableICMPRedirects' 0
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' 'DisableIPSourceRouting' 2
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' 'SynAttackProtect' 2
    
    # Reset WinHTTP proxy
    netsh winhttp reset proxy | Out-Null
} "Apply network security hardening"

# ---------- Windows Updates ----------
Write-Host "`n[PHASE 12] Windows Update Configuration..." -ForegroundColor Yellow

Do {
    # Configure Windows Update for automatic download and notification
    Set-RegDword 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' 'NoAutoUpdate' 0
    Set-RegDword 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' 'AUOptions' 3
    Set-RegDword 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' 'ScheduledInstallDay' 0
    Set-RegDword 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' 'ScheduledInstallTime' 3
    
    # Start Windows Update service
    Set-Service -Name wuauserv -StartupType Automatic -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
} "Configure Windows Update settings"

# ---------- Action Center ----------
Write-Host "`n[PHASE 13] Windows Action Center..." -ForegroundColor Yellow

Do {
    # Enable Windows Action Center / Security Center
    Set-Service -Name wscsvc -StartupType Automatic -ErrorAction SilentlyContinue
    Start-Service -Name wscsvc -ErrorAction SilentlyContinue
    
    # Enable notifications
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer' 'EnableAutoTray' 0
} "Enable Windows Action Center"

# ---------- File System Security ----------
Write-Host "`n[PHASE 14] File System and Media Scan..." -ForegroundColor Yellow

$mediaExtensions = @('*.mp3', '*.mp4', '*.avi', '*.mov', '*.mkv', '*.wmv', '*.flv', '*.mpg', '*.mpeg', 
                     '*.m4a', '*.flac', '*.wav', '*.wma', '*.aac', '*.jpg', '*.jpeg', '*.png', 
                     '*.gif', '*.bmp', '*.tiff')

$hackingTools = @('nc.exe', 'netcat.exe', 'nmap.exe', 'wireshark.exe', 'mimikatz.exe', 'pwdump.exe',
                  'ophcrack.exe', 'l0phtcrack.exe', 'john.exe', 'hashcat.exe', 'aircrack*.exe',
                  'metasploit*.exe', 'hydra.exe', 'sqlmap.exe')

Do {
    $mediaFiles = @()
    $hackTools = @()
    
    # Scan common user directories
    $scanPaths = @('C:\Users\*\Desktop', 'C:\Users\*\Documents', 'C:\Users\*\Downloads', 
                   'C:\Users\*\Pictures', 'C:\Users\*\Videos', 'C:\Users\*\Music')
    
    foreach($path in $scanPaths) {
        foreach($ext in $mediaExtensions) {
            $found = Get-ChildItem -Path $path -Filter $ext -Recurse -ErrorAction SilentlyContinue
            $mediaFiles += $found
        }
    }
    
    # Scan for hacking tools
    foreach($tool in $hackingTools) {
        $found = Get-ChildItem -Path 'C:\' -Filter $tool -Recurse -ErrorAction SilentlyContinue
        $hackTools += $found
    }
    
    if($mediaFiles.Count -gt 0) {
        $mediaFiles | Select FullName, Length, LastWriteTime | Export-Csv "$LogDir\media-files-$stamp.csv" -NoTypeInformation
        Log-Finding "Found $($mediaFiles.Count) media files - review for unauthorized content" "Warning"
    }
    
    if($hackTools.Count -gt 0) {
        $hackTools | Select FullName, Length, LastWriteTime | Export-Csv "$LogDir\hacking-tools-$stamp.csv" -NoTypeInformation
        Log-Finding "Found $($hackTools.Count) potential hacking tools!" "Critical"
    }
} "Scan for unauthorized media files and hacking tools"

# ---------- Scheduled Tasks Audit ----------
Write-Host "`n[PHASE 15] Scheduled Tasks Audit..." -ForegroundColor Yellow

$tasksCsv = Join-Path $LogDir "scheduled-tasks-$stamp.csv"

Do {
    $suspiciousTasks = @()
    $tasks = Get-ScheduledTask | Where-Object {$_.State -ne 'Disabled'}
    
    foreach($task in $tasks) {
        # Check for suspicious characteristics
        if($task.TaskPath -notlike '\Microsoft\*' -or 
           $task.Actions.Execute -like '*powershell*' -or
           $task.Actions.Execute -like '*cmd*' -or
           $task.Actions.Execute -like '*wscript*' -or
           $task.Actions.Execute -like '*cscript*') {
            $suspiciousTasks += $task
        }
    }
    
    $tasks | Select TaskName, TaskPath, State, @{N='Actions';E={($_.Actions | ForEach-Object {$_.Execute}) -join '; '}} |
        Export-Csv $tasksCsv -NoTypeInformation
    
    if($suspiciousTasks.Count -gt 0) {
        Log-Finding "Found $($suspiciousTasks.Count) potentially suspicious scheduled tasks" "Warning"
    }
} "Audit scheduled tasks"

# ---------- Startup Programs Audit ----------
Write-Host "`n[PHASE 16] Startup Programs Audit..." -ForegroundColor Yellow

Do {
    $runKeys = @(
        'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run',
        'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce',
        'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run',
        'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\RunOnce',
        'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run',
        'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce'
    )
    
    $startupItems = @()
    foreach($key in $runKeys) {
        if(Test-Path $key) {
            $items = Get-ItemProperty $key -ErrorAction SilentlyContinue
            if($items) {
                $props = $items.PSObject.Properties | Where-Object { $_.
