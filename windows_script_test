<# 
CyberPatriot Windows Server 2022 Hardening Script
Author: Modified for CyberPatriot Server 2022 scenario
Run as: PowerShell (Admin) - Run as amojtabai
Tested: Windows Server 2022

CRITICAL NOTES:
- Preserves RDP (required by scenario)
- Preserves SMB/File Sharing (required by scenario)
- Preserves AFA share (C:\AFA -> share name: AFA)
- Does NOT change amojtabai password (auto-login user)
- Maintains CCSClient.exe service
- Keeps authorized users and admins

Switches:
 -AuditOnly           : Print actions only; do not modify system
 -LogDir              : Log/backup output directory (default C:\CyberPatriotLogs)
 -SkipUserPasswords   : Skip password changes for users (use if you want to do manually)

Creates:
 - Backups of key registry hives + service startup states
 - CSV/TXT audits (admins, shares, users, tasks, startups, software)
 - Summary report with findings and actions
#>

[CmdletBinding()]
param(
    [switch]$AuditOnly,
    [string]$LogDir = "$env:SystemDrive\CyberPatriotLogs",
    [switch]$SkipUserPasswords
)

# ---------- Configuration ----------
$AuthorizedAdmins = @('amojtabai', 'hcooper', 'hhambright', 'tito')
$AuthorizedUsers  = @('rreddington', 'ekeen', 'dressler', 'snavabi', 'dzuma', 'mmalik', 'apark', 'gcarter', 'cpanabaker')
$AllAuthorizedAccounts = $AuthorizedAdmins + $AuthorizedUsers
$CurrentUser = $env:USERNAME
$RequiredShare = 'AFA'  # Must preserve this share
$ComputerName = $env:COMPUTERNAME

# ---------- Helpers ----------
function Assert-Admin {
    if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
        Write-Error "Run this script in an elevated PowerShell (Admin)."
        exit 1
    }
}

function Invoke-HardeningAction {
    param (
        [scriptblock]$Action,
        [string]$Desc
    )
    if ($AuditOnly) {
        Write-Host "[AUDIT] $Desc" -ForegroundColor Cyan
    } else {
        Write-Host "[APPLY] $Desc" -ForegroundColor Green
        try {
            & $Action
        } catch {
            Write-Warning "Failed: $Desc - $_"
        }
    }
}

function Log-Finding {
    param([string]$Finding, [string]$Severity = "Info")
    $color = switch($Severity) {
        "Critical" { "Red" }
        "Warning"  { "Yellow" }
        "Info"     { "White" }
        default    { "White" }
    }
    Write-Host "[$Severity] $Finding" -ForegroundColor $color
    Add-Content -Path "$LogDir\findings-$stamp.txt" -Value "[$Severity] $Finding"
}

function Safe-NewDir([string]$p) {
    if (-not (Test-Path $p)) {
        New-Item -ItemType Directory -Path $p -Force | Out-Null
    }
}

function TimeStamp {
    Get-Date -Format "yyyyMMdd-HHmmss"
}

function Set-RegDword($path, $name, $val) {
    if (-not (Test-Path $path)) {
        New-Item -Path $path -Force | Out-Null
    }
    New-ItemProperty -Path $path -Name $name -PropertyType DWord -Value $val -Force | Out-Null
}

function Set-RegString($path, $name, $val) {
    if (-not (Test-Path $path)) {
        New-Item -Path $path -Force | Out-Null
    }
    New-ItemProperty -Path $path -Name $name -PropertyType String -Value $val -Force | Out-Null
}

# ---------- Initialize ----------
Assert-Admin
Safe-NewDir $LogDir
$stamp = TimeStamp
$runDir = Join-Path $LogDir $stamp
Safe-NewDir $runDir
Start-Transcript -Path "$runDir\hardening-$stamp.log" -Force | Out-Null

Write-Host "`n===== CyberPatriot Server 2022 Hardening Script =====" -ForegroundColor Magenta
Write-Host "Current User: $CurrentUser" -ForegroundColor Cyan
Write-Host "Audit Only Mode: $AuditOnly" -ForegroundColor Cyan
Write-Host "Log Directory: $runDir`n" -ForegroundColor Cyan

# Absolute guardrails (never lock out the current user)
if ($CurrentUser -and ($CurrentUser -notin $AuthorizedAdmins)) {
    $AuthorizedAdmins += $CurrentUser
    $AllAuthorizedAccounts += $CurrentUser
    $AuthorizedAdmins = $AuthorizedAdmins | Select-Object -Unique
    $AllAuthorizedAccounts = $AllAuthorizedAccounts | Select-Object -Unique
    Log-Finding "Added current user '$CurrentUser' to Authorized Admins (guardrail)" "Info"
}

# ---------- Backups ----------
Write-Host "`n[PHASE 1] Creating Backups..." -ForegroundColor Yellow

$regBackupDir = Join-Path $runDir "registry"
$svcBackupCsv = Join-Path $runDir "services.csv"
Safe-NewDir $regBackupDir

$RegKeysToBackup = @(
    'HKLM\SYSTEM\CurrentControlSet\Control\Lsa',
    'HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System',
    'HKLM\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters',
    'HKLM\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU',
    'HKLM\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient',
    'HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon',
    'HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters',
    'HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server'
)

foreach ($k in $RegKeysToBackup) {
    Invoke-HardeningAction -Action {
        reg.exe export $k "$regBackupDir\$(($k -replace '[\\/:*?""<>|]','_')).reg" /y 2>$null | Out-Null
    } -Desc "Backup registry: $k"
}

Invoke-HardeningAction -Action {
    Get-Service | Select Name, DisplayName, Status, StartType | Export-Csv -NoTypeInformation -Path $svcBackupCsv
} -Desc "Backup service startup states"

# ---------- User Account Audit & Management ----------
Write-Host "`n[PHASE 2] User Account Management..." -ForegroundColor Yellow

$usersCsv     = Join-Path $runDir "local-users.csv"
$adminListTxt = Join-Path $runDir "local-admins.txt"

# Enumerate current users
$currentUsers = Get-LocalUser
$currentUsers |
    Select Name, Enabled, PasswordRequired, PasswordLastSet, LastLogon,
        @{N='PasswordAgeDays';E={ if ($_.PasswordLastSet) { (New-TimeSpan $_.PasswordLastSet).Days } else { "Never" } }} |
    Export-Csv $usersCsv -NoTypeInformation

# Check for unauthorized users
Invoke-HardeningAction -Action {
    foreach ($user in $currentUsers) {
        $n = $user.Name
        if ($n -notin $AllAuthorizedAccounts) {
            if ($n -notlike '*$' -and $n -ne 'Administrator' -and $n -ne 'Guest' -and $n -ne 'DefaultAccount' -and $n -ne 'WDAGUtilityAccount') {
                Log-Finding "Unauthorized user found: $n" "Critical"
                if (-not $AuditOnly) {
                    try {
                        Disable-LocalUser -Name $n -ErrorAction Stop
                        Log-Finding "Disabled unauthorized user: $n" "Info"
                    } catch {}
                }
            }
        }
    }
} -Desc "Check and disable unauthorized users"

# Disable Guest; only disable built-in Administrator if safe
Invoke-HardeningAction -Action {
    Disable-LocalUser -Name 'Guest' -ErrorAction SilentlyContinue
    if ($CurrentUser -ne 'Administrator') {
        Disable-LocalUser -Name 'Administrator' -ErrorAction SilentlyContinue
    }
} -Desc "Disable Guest and (if safe) built-in Administrator"

# Set password requirements for users (except amojtabai)
if (-not $SkipUserPasswords) {
    Invoke-HardeningAction -Action {
        foreach ($userName in $AllAuthorizedAccounts) {
            if ($userName -ne 'amojtabai') {
                $user = Get-LocalUser -Name $userName -ErrorAction SilentlyContinue
                if ($user) {
                    $newPass = "Cyb3rP@triot$(Get-Random -Minimum 1000 -Maximum 9999)!"
                    $secPass = ConvertTo-SecureString $newPass -AsPlainText -Force
                    Set-LocalUser -Name $userName -Password $secPass -PasswordNeverExpires $false -UserMayChangePassword $true
                    Add-Content -Path "$runDir\PASSWORDS-DELETE-AFTER.txt" -Value "$userName : $newPass"
                }
            }
        }
    } -Desc "Set secure passwords for authorized users (except amojtabai)"
} else {
    Log-Finding "Skipping user password changes by request (-SkipUserPasswords)" "Info"
}

# Fix group memberships (Administrators + Remote Desktop Users)
Invoke-HardeningAction -Action {
    $adminsGroup = Get-LocalGroupMember -Group 'Administrators' -ErrorAction SilentlyContinue
    "Current Administrators group members:" | Out-File $adminListTxt
    $adminsGroup | Format-Table -AutoSize | Out-String | Add-Content $adminListTxt

    foreach ($admin in $AuthorizedAdmins) {
        $already = $adminsGroup | Where-Object { ($_.Name -split '\\')[-1] -ieq $admin }
        if (-not $already) {
            try {
                Add-LocalGroupMember -Group 'Administrators' -Member "$ComputerName\$admin" -ErrorAction Stop
            } catch {
                try {
                    Add-LocalGroupMember -Group 'Administrators' -Member $admin -ErrorAction Stop
                } catch {}
            }
            Log-Finding "Ensured $admin is in Administrators" "Info"
        }
    }
    foreach ($member in $adminsGroup) {
        $memberName = ($member.Name -split '\\')[-1]
        if ($memberName -notin $AuthorizedAdmins -and $memberName -ne 'Administrator') {
            try {
                Remove-LocalGroupMember -Group 'Administrators' -Member $member.Name -ErrorAction Stop
                Log-Finding "Removed $memberName from Administrators" "Warning"
            } catch {}
        }
    }

    # RDP group
    foreach ($acct in $AllAuthorizedAccounts) {
        try {
            Add-LocalGroupMember -Group 'Remote Desktop Users' -Member "$ComputerName\$acct" -ErrorAction Stop
        } catch {
            try {
                Add-LocalGroupMember -Group 'Remote Desktop Users' -Member $acct -ErrorAction Stop
            } catch {}
        }
    }
} -Desc "Configure Administrators and Remote Desktop Users groups"

# ---------- Password & Lockout Policy ----------
Write-Host "`n[PHASE 3] Password and Security Policies..." -ForegroundColor Yellow

$infPath = Join-Path $runDir "local-security.inf"
@"
[System Access]
MinimumPasswordAge = 1
MaximumPasswordAge = 90
MinimumPasswordLength = 10
PasswordComplexity = 1
PasswordHistorySize = 10
LockoutBadCount = 5
ResetLockoutCount = 30
LockoutDuration = 30
ClearTextPassword = 0
LSAAnonymousNameLookup = 0

[Event Audit]
AuditSystemEvents = 3
AuditLogonEvents = 3
AuditObjectAccess = 3
AuditPrivilegeUse = 3
AuditPolicyChange = 3
AuditAccountManage = 3
AuditProcessTracking = 3
AuditDSAccess = 3
AuditAccountLogon = 3
"@ | Out-File -Encoding ASCII $infPath

Invoke-HardeningAction -Action {
    secedit.exe /configure /db "$runDir\secedit.sdb" /cfg $infPath /areas SECURITYPOLICY /quiet
    net accounts /lockoutthreshold:5 /MINPWLEN:10 /MAXPWAGE:90 /MINPWAGE:1 | Out-Null
} -Desc "Apply password/account lockout policies"

Invoke-HardeningAction -Action {
    auditpol /set /category:* /success:enable /failure:enable | Out-Null
} -Desc "Enable comprehensive auditing"

# ---------- Windows Firewall ----------
Write-Host "`n[PHASE 4] Firewall Configuration..." -ForegroundColor Yellow
Invoke-HardeningAction -Action {
    netsh advfirewall set allprofiles state on | Out-Null
    netsh advfirewall set domainprofile firewallpolicy blockinboundalways,allowoutbound | Out-Null
    netsh advfirewall set privateprofile firewallpolicy blockinboundalways,allowoutbound | Out-Null
    netsh advfirewall set publicprofile firewallpolicy blockinboundalways,allowoutbound | Out-Null
    netsh advfirewall firewall set rule group="Remote Desktop" new enable=yes | Out-Null
    netsh advfirewall firewall set rule group="File and Printer Sharing" new enable=yes | Out-Null
    foreach ($rule in @("Remote Assistance*","Telnet Server","netcat","Windows Media Player*")) {
        netsh advfirewall firewall set rule name="$rule" new enable=no 2>$null | Out-Null
    }
} -Desc "Configure Windows Firewall (preserving RDP and SMB)"

# ---------- Services Management ----------
Write-Host "`n[PHASE 5] Services Configuration..." -ForegroundColor Yellow
$servicesToDisable = @(
    'RemoteRegistry','SSDPSRV','upnphost','Telnet','SNMP','SNMPTRAP','WMPNetworkSvc','Fax',
    'XboxGipSvc','XblAuthManager','XblGameSave','XboxNetApiSvc','Browser','lfsvc','MapsBroker',
    'RetailDemo','PhoneSvc','WbioSrvc','WinHttpAutoProxySvc','wisvc'
)
Invoke-HardeningAction -Action {
    foreach ($svcName in $servicesToDisable) {
        $svc = Get-Service -Name $svcName -ErrorAction SilentlyContinue
        if ($svc -and $svc.Name -ne 'CCSClient') {
            try {
                Stop-Service -Name $svcName -Force -ErrorAction SilentlyContinue
                Set-Service -Name $svcName -StartupType Disabled -ErrorAction SilentlyContinue
                Log-Finding "Disabled service: $svcName" "Info"
            } catch {}
        }
    }
} -Desc "Disable unnecessary services"

$servicesToManual = @('Spooler')  # Print Spooler
Invoke-HardeningAction -Action {
    foreach ($svcName in $servicesToManual) {
        $svc = Get-Service -Name $svcName -ErrorAction SilentlyContinue
        if ($svc) {
            Set-Service -Name $svcName -StartupType Manual -ErrorAction SilentlyContinue
        }
    }
} -Desc "Set Print Spooler to Manual"

$criticalServices = @('TermService','LanmanServer','LanmanWorkstation')
Invoke-HardeningAction -Action {
    foreach ($svcName in $criticalServices) {
        $svc = Get-Service -Name $svcName -ErrorAction SilentlyContinue
        if ($svc) {
            Set-Service -Name $svcName -StartupType Automatic -ErrorAction SilentlyContinue
            Start-Service -Name $svcName -ErrorAction SilentlyContinue
            Log-Finding "Ensured critical service running: $svcName" "Info"
        }
    }
} -Desc "Ensure critical services are running"

# ---------- RDP Configuration ----------
Write-Host "`n[PHASE 6] Remote Desktop Configuration..." -ForegroundColor Yellow
Invoke-HardeningAction -Action {
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server' 'fDenyTSConnections' 0
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' 'UserAuthentication' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' 'SecurityLayer' 2
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' 'PortNumber' 3389
} -Desc "Configure RDP with Network Level Authentication"

# ---------- SMB/File Sharing ----------
Write-Host "`n[PHASE 7] SMB and File Sharing..." -ForegroundColor Yellow
$shareListPath = Join-Path $runDir "shares.txt"
Invoke-HardeningAction -Action {
    $currentShares = Get-SmbShare -ErrorAction SilentlyContinue
    $currentShares | Format-Table -AutoSize | Out-String | Out-File $shareListPath
    $afaShare = $currentShares | Where-Object { $_.Name -eq $RequiredShare }
    if (-not $afaShare) {
        if (-not (Test-Path 'C:\AFA')) {
            New-Item -ItemType Directory -Path 'C:\AFA' -Force | Out-Null
        }
        New-SmbShare -Name 'AFA' -Path 'C:\AFA' -FullAccess 'Administrators' -ReadAccess 'Users' -ErrorAction SilentlyContinue | Out-Null
        Log-Finding "Created required AFA share" "Info"
    }
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters'      'RequireSecuritySignature' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters'      'EnableSecuritySignature'  1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters' 'RequireSecuritySignature' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters' 'EnableSecuritySignature'  1
    try {
        Set-SmbServerConfiguration -EnableSMB1Protocol $false -Force -ErrorAction Stop
    } catch {}
} -Desc "Configure SMB security and ensure AFA share exists"

# ---------- LSA / Auth Hardening ----------
Write-Host "`n[PHASE 8] LSA and Authentication..." -ForegroundColor Yellow
Invoke-HardeningAction -Action {
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'RunAsPPL' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'LmCompatibilityLevel' 5
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'NoLMHash' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'RestrictAnonymous' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'RestrictAnonymousSAM' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'LimitBlankPasswordUse' 1
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Control\Lsa' 'DisableDomainCreds' 1
} -Desc "Harden LSA/NTLM/anonymous"

# ---------- UAC ----------
Write-Host "`n[PHASE 9] User Account Control..." -ForegroundColor Yellow
Invoke-HardeningAction -Action {
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'EnableLUA' 1
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'ConsentPromptBehaviorAdmin' 2
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'ConsentPromptBehaviorUser' 0
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'PromptOnSecureDesktop' 1
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'EnableInstallerDetection' 1
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System' 'EnableVirtualization' 1
} -Desc "Configure UAC"

# ---------- Microsoft Defender ----------
Write-Host "`n[PHASE 10] Microsoft Defender..." -ForegroundColor Yellow
Invoke-HardeningAction -Action {
    # Enable and configure Defender but skip time-consuming scans
    try { 
        Set-MpPreference -DisableRealtimeMonitoring $false -ErrorAction SilentlyContinue
        Write-Host "   - Real-time monitoring enabled" -ForegroundColor Green
    } catch { Write-Warning "   - Failed to enable real-time monitoring: $_" }
    
    try { 
        Set-MpPreference -MAPSReporting Advanced -ErrorAction SilentlyContinue
        Write-Host "   - Cloud protection set to Advanced" -ForegroundColor Green
    } catch { Write-Warning "   - Failed to set cloud protection: $_" }
    
    try { 
        Set-MpPreference -SubmitSamplesConsent SendAllSamples -ErrorAction SilentlyContinue
        Write-Host "   - Sample submission enabled" -ForegroundColor Green
    } catch { Write-Warning "   - Failed to set sample submission: $_" }
    
    try { 
        Set-MpPreference -DisableBehaviorMonitoring $false -ErrorAction SilentlyContinue
        Write-Host "   - Behavior monitoring enabled" -ForegroundColor Green
    } catch { Write-Warning "   - Failed to enable behavior monitoring: $_" }
    
    # Skip signature update and scan to save time
    Write-Host "   - Signature update and scan skipped (time optimization)" -ForegroundColor Yellow
} -Desc "Enable/configure Defender (scans skipped)"

# ---------- Network Security ----------
Write-Host "`n[PHASE 11] Network Security..." -ForegroundColor Yellow
Invoke-HardeningAction -Action {
    Set-RegDword 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\DNSClient' 'EnableMulticast' 0  # Disable LLMNR
    $adapters = Get-WmiObject Win32_NetworkAdapterConfiguration -Filter "IPEnabled='True'"
    foreach ($adapter in $adapters) {
        $null = $adapter.SetTcpipNetbios(2)
    }
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' 'EnableICMPRedirects' 0
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' 'DisableIPSourceRouting' 2
    Set-RegDword 'HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters' 'SynAttackProtect' 2
    netsh winhttp reset proxy | Out-Null
} -Desc "Apply TCP/IP/Name resolution hardening"

# ---------- Windows Update ----------
Write-Host "`n[PHASE 12] Windows Update..." -ForegroundColor Yellow
Invoke-HardeningAction -Action {
    Set-RegDword 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' 'NoAutoUpdate' 0
    Set-RegDword 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' 'AUOptions' 3
    Set-RegDword 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' 'ScheduledInstallDay' 0
    Set-RegDword 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' 'ScheduledInstallTime' 3
    Set-Service -Name wuauserv -StartupType Automatic -ErrorAction SilentlyContinue
    Start-Service -Name wuauserv -ErrorAction SilentlyContinue
} -Desc "Configure Windows Update"

# ---------- Action Center ----------
Write-Host "`n[PHASE 13] Windows Action Center..." -ForegroundColor Yellow
Invoke-HardeningAction -Action {
    Set-Service -Name wscsvc -StartupType Automatic -ErrorAction SilentlyContinue
    Start-Service -Name wscsvc -ErrorAction SilentlyContinue
    Set-RegDword 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer' 'EnableAutoTray' 0
} -Desc "Enable Security Center"

# ---------- File System / Media / Tools Scan ----------
Write-Host "`n[PHASE 14] File System and Media Scan..." -ForegroundColor Yellow
$mediaExtensions = @('*.mp3','*.mp4','*.avi','*.mov','*.mkv','*.wmv','*.flv','*.mpg','*.mpeg','*.m4a','*.flac','*.wav','*.wma','*.aac','*.jpg','*.jpeg','*.png','*.gif','*.bmp','*.tiff')
$hackingTools = @('nc.exe','netcat.exe','nmap.exe','wireshark.exe','mimikatz.exe','pwdump.exe','ophcrack.exe','l0phtcrack.exe','john.exe','hashcat.exe','aircrack*.exe','metasploit*.exe','hydra.exe','sqlmap.exe')
Invoke-HardeningAction -Action {
    $mediaFiles = @(); $hackTools = @()
    $scanPaths = @('C:\Users\*\Desktop','C:\Users\*\Documents','C:\Users\*\Downloads','C:\Users\*\Pictures','C:\Users\*\Videos','C:\Users\*\Music')
    foreach ($path in $scanPaths) {
        foreach ($ext in $mediaExtensions) {
            $mediaFiles += Get-ChildItem -Path $path -Filter $ext -Recurse -ErrorAction SilentlyContinue
        }
    }
    foreach ($tool in $hackingTools) {
        $hackTools += Get-ChildItem -Path 'C:\' -Filter $tool -Recurse -ErrorAction SilentlyContinue
    }
    if ($mediaFiles.Count -gt 0) {
        $mediaFiles | Select FullName, Length, LastWriteTime | Export-Csv "$runDir\media-files.csv" -NoTypeInformation
        Log-Finding "Found $($mediaFiles.Count) media files (review)" "Warning"
    }
    if ($hackTools.Count -gt 0) {
        $hackTools | Select FullName, Length, LastWriteTime | Export-Csv "$runDir\hacking-tools.csv" -NoTypeInformation
        Log-Finding "Found $($hackTools.Count) potential hacking tools" "Critical"
    }
} -Desc "Scan for unauthorized media files and hacking tools"

# ---------- Scheduled Tasks Audit ----------
Write-Host "`n[PHASE 15] Scheduled Tasks Audit..." -ForegroundColor Yellow
$tasksCsv = Join-Path $runDir "scheduled-tasks.csv"
Invoke-HardeningAction -Action {
    $tasks = Get-ScheduledTask | Where-Object { $_.State -ne 'Disabled' }
    $suspicious = @()
    foreach ($t in $tasks) {
        $acts = ($t.Actions | ForEach-Object { $_.Execute }) -join '; '
        if ($t.TaskPath -notlike '\Microsoft\*' -or $acts -match 'powershell|cmd|wscript|cscript') {
            $suspicious += $t
        }
    }
    $tasks | Select TaskName, TaskPath, State, @{N='Actions';E={ ($_.Actions | ForEach-Object { $_.Execute }) -join '; ' }} |
        Export-Csv $tasksCsv -NoTypeInformation
    if ($suspicious.Count -gt 0) {
        Log-Finding "Found $($suspicious.Count) potentially suspicious scheduled tasks" "Warning"
    }
} -Desc "Audit scheduled tasks"

# ---------- Startup Programs Audit ----------
Write-Host "`n[PHASE 16] Startup Programs Audit..." -ForegroundColor Yellow
Invoke-HardeningAction -Action {
    $runKeys = @(
        'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run',
        'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce',
        'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Run',
        'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\RunOnce',
        'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run',
        'HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce'
    )
    $startupItems = @()
    foreach ($key in $runKeys) {
        if (Test-Path $key) {
            $props = (Get-ItemProperty $key -ErrorAction SilentlyContinue).PSObject.Properties |
                     Where-Object { $_.Name -notin @('PSPath','PSParentPath','PSChildName','PSDrive','PSProvider') }
            foreach ($p in $props) {
                $startupItems += [pscustomobject]@{
                    HiveKey = $key
                    Name    = $p.Name
                    Command = [string]$p.Value
                }
            }
        }
    }
    $startupCsv = Join-Path $runDir "startup-programs.csv"
    $startupItems | Export-Csv $startupCsv -NoTypeInformation
    # Flag obvious suspicious entries
    $sus = $startupItems | Where-Object { $_.Command -match 'powershell.exe|-enc |-EncodedCommand|wscript|cscript|cmd.exe /c|\\AppData\\|Temp\\' }
    if ($sus.Count -gt 0) {
        Log-Finding "Found $($sus.Count) suspicious startup entries" "Warning"
    }
} -Desc "Audit startup items"

# ---------- Installed Software Inventory ----------
Write-Host "`n[PHASE 17] Software Inventory..." -ForegroundColor Yellow
Invoke-HardeningAction -Action {
    $soft = @()
    $uninstKeys = @(
        'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall',
        'HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall'
    )
    foreach ($k in $uninstKeys) {
        if (Test-Path $k) {
            Get-ChildItem $k | ForEach-Object {
                $d = Get-ItemProperty $_.PsPath -ErrorAction SilentlyContinue
                if ($d.DisplayName) {
                    $soft += [pscustomobject]@{
                        DisplayName    = $d.DisplayName
                        DisplayVersion = $d.DisplayVersion
                        Publisher      = $d.Publisher
                        InstallDate    = $d.InstallDate
                    }
                }
            }
        }
    }
    $soft | Sort-Object DisplayName | Export-Csv (Join-Path $runDir 'installed-software.csv') -NoTypeInformation
} -Desc "Inventory installed software"

# ---------- Summary ----------
Write-Host "`n[PHASE 18] Summary..." -ForegroundColor Yellow
$summary = @()
$summary += "Logs: $runDir"
$summary += "Users CSV: $usersCsv"
$summary += "Admins list: $adminListTxt"
$summary += "Services CSV: $svcBackupCsv"
$summary += "Shares: $shareListPath"
$summary += "Tasks CSV: $tasksCsv"
$summary += "Startup CSV: $startupCsv"
$summary += "Software CSV: $(Join-Path $runDir 'installed-software.csv')"
$summary += "Findings: $LogDir\findings-$stamp.txt"
$summary | ForEach-Object { Write-Host " - $_" -ForegroundColor White }

Write-Host "`nHARDENING COMPLETE. Review findings and CSVs in: $runDir`n" -ForegroundColor Magenta
Stop-Transcript | Out-Null
